"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.4.

"""

import os
import re
import sys
import warnings
from pathlib import Path
from typing import Any, Dict, List, Pattern, Set, TextIO, Tuple, Union

import dj_database_url
from configurations import Configuration
from logtail import LogtailHandler
from loguru import logger
from redis.backoff import ExponentialBackoff
from redis.retry import Retry


def log_warning(message, category, filename, lineno, file=None, line=None):
    logger.warning(f" {message}")


class Base(Configuration):
    # SECTION - Base Protocols, General Security ACL COnfigs
    BASE_DIR: Path = Path(__file__).resolve().parent.parent
    SECRET_KEY: str = os.environ["SECRET_KEY"]
    MAINTENANCE_MODE: bool = False
    TESTING: bool = "test" in sys.argv
    SECURE_PROXY_SSL_HEADER: Tuple[str, str] = ("HTTP_X_PROXIED_TRAFFIC", "https")
    INTERNAL_IPS: List[str] = ["127.0.0.1"]
    ROOT_URLCONF: str = "core.urls"

    # !SECTION

    # SECTION - Basic Application Definition
    DATETIME_FORMAT: str = "m/d/yyyy h:mm A"
    ADMINS: List[str] = [("Terry Brooks", "Terry@BrooksJr.com")]
    MANAGERS: List[str] = ADMINS
    WSGI_APPLICATION: str = "core.wsgi.application"
    IGNORABLE_404_URLS: List[Pattern] = [
        re.compile(r"^/apple-touch-icon.*\.png$"),
        re.compile(r"^/favicon\.ico$"),
        re.compile(r"^/robots\.txt$"),
        re.compile(r"\.(php|cgi|php7)$"),
    ]
    ROBOTS_USE_HOST: bool = False
    FIRST_DAY_OF_WEEK: int = 1

    HEALTH_CHECK: Dict[str, int] = {
        "DISK_USAGE_MAX": 90,  # percent
        "MEMORY_MIN": 100,  # in MB
    }
    # SECTION - Base CORS and CSRF Settings
    CSRF_COOKIE_NAME: str = "carenett-csrf"
    CSRF_FAILURE_VIEW: str = "common.errors.permission_denied_handler"
    SILENCED_SYSTEM_CHECKS: List[str] = ["auth.W004", "captcha.recaptcha_test_key_error"]
    ROBOTS_SITEMAP_VIEW_NAME: str = "cached-sitemap"
    # SECTION - Forms
    TINYMCE_JS_URL: str = f'https://cdn.tiny.cloud/1/{os.environ["TINYMCE_API_KEY"]}/tinymce/7/tinymce.min.js'
    TINYMCE_COMPRESSOR: bool = True
    CRISPY_TEMPLATE_PACK: str = "bootstrap5"
    TINYMCE_DEFAULT_CONFIG: Dict[str, str] = {
        "menubar": "file edit view insert format tools table help",
        "plugins": "advlist autolink lists link image charmap print preview anchor searchreplace visualblocks code " "fullscreen insertdatetime media table paste code help wordcount spellchecker",
        "toolbar": "undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft "
        "aligncenter alignright alignjustify | outdent indent |  numlist bullist checklist | forecolor "
        "backcolor casechange permanentpen formatpainter removeformat | pagebreak | charmap emoticons | "
        "fullscreen  preview save  | insertfile image media pageembed template link anchor codesample | "
        "| showcomments addcomment code",
        "custom_undo_redo_levels": 10,
        "language": "en",
    }
    # SECTION - Database and Caching
    CACHE_TTL: int = int(os.environ["TIME_TO_LIVE_MINUTES"]) * 60
    QUERYSET_TTL: int = os.environ["QUERYSET_TTL"]
    DEFAULT_AUTO_FIELD: str = "django.db.models.BigAutoField"
    HEALTHCHECK_CACHE_KEY: str = "cache-heartbeat"
    SESSION_ENGINE: str = "django.contrib.sessions.backends.cache"
    SESSION_CACHE_ALIAS: str = "session"
    # SECTION - Database Encryption
    ENCRYPT_KEY: str = os.environ["ENCRYPT_KEY"]
    ENCRYPT_PRIVATE_KEY: str = os.environ["DB_GPG_PRIVATE_KEY"]
    ENCRYPT_PUBLIC_KEY: str = os.environ["DB_GPG_PUBLIC_KEY"]

    # Centralized Redis connection options
    REDIS_CONNECTION_OPTIONS: Dict[str, Union[str, int]] = {
        "PARSER_CLASS": "redis.connection._HiredisParser",
        "SOCKET_CONNECT_TIMEOUT": 30,  # seconds
        "SOCKET_TIMEOUT": 30,  # seconds
        "CLIENT_CLASS": "django_redis.client.DefaultClient",
        "CONNECTION_POOL_CLASS": "redis.BlockingConnectionPool",
        "CONNECTION_POOL_CLASS_KWARGS": {"max_connections": 10, "timeout": 20000},
        "RETRY_ON_TIMEOUT": True,
        "RETRY_ON_ERROR": [
            "redis.exceptions.ConnectionError",
            "redis.exceptions.BusyLoadingError",
            "redis.exceptions.TimeoutError",
        ],
        "RETRY": Retry(
            backoff=ExponentialBackoff(base=1.0, cap=15),
            retries=5,  # Maximum retries
        ),  # Retry strategy for timeouts
    }

    ROBOTS_CACHE_TIMEOUT: int = 60 * 60 * 24
    # SECTION - Password validation
    AUTH_USER_MODEL: str = "nhhc_employee.Employee"
    AUTH_PROFILE_MODULE: str = "applications.authentication.UserProfile"
    DEFENDER_REDIS_URL: str = os.environ["DEFENDER_REDIS_CACHE_TOKEN"]
    DEFENDER_BEHIND_REVERSE_PROXY: bool = True
    DEFENDER_LOCK_OUT_BY_IP_AND_USERNAME = True
    DEFENDER_REVERSE_PROXY_HEADER: str = SECURE_PROXY_SSL_HEADER
    # https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators
    # ADMINRESTRICT_ENABLE_CACHE = True TODO: Check Impact and Remove
    # ADMINRESTRICT_DENIED_MSG = "Unable To Access Admin From This IP Address" TODO: Check Impact and Remove
    AUTH_PASSWORD_VALIDATORS: List[Dict[str, str]] = [
        {
            "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
        },
    ]
    AUTHENTICATION_BACKENDS: List[str] = [
        "django.contrib.auth.backends.ModelBackend",
        "allauth.account.auth_backends.AuthenticationBackend",
        "guardian.backends.ObjectPermissionBackend"
    ]
    ACCOUNT_AUTHENTICATION_METHOD: str = "username_email"
    LOGIN_REDIRECT_URL: str = "/dashboard"
    LOGIN_URL: str = "/login"
    LOGOUT_REDIRECT_URL: Tuple[str] = LOGIN_URL
    REQUIRE_LOGIN_PUBLIC_URLS: Tuple[str] = (LOGIN_URL, LOGOUT_REDIRECT_URL, r"^/api/.*", r"^/metrics", r"^/control-center", r"^/status/*", r"/confirm-email", r"/$", r"/^about", r"^favicon.ico\/?/$")
    REQUIRE_LOGIN_PUBLIC_NAMED_URLS: Tuple[str] = (
        "account_reset_password",
        "account_email",
        "account_set_password",
        "account_change_password",
    )
    PASSWORD_HASHERS: List[str] = [
        "django.contrib.auth.hashers.Argon2PasswordHasher",
        "django.contrib.auth.hashers.ScryptPasswordHasher",
        "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
        "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    ]

    ACCOUNT_EMAIL_REQUIRED: bool = True
    ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE: bool = False
    ACCOUNT_EMAIL_VERIFICATION: str = "mandatory"

    # SECTION - Internationalization
    LANGUAGE_CODE: str = "en-us"
    TIME_ZONE: str = "America/Chicago"
    USE_I18N: bool = True
    USE_L10N: bool = True
    USE_TZ: bool = True
    # SECTION - STORAGE
    FILE_UPLOAD_TEMP_DIR: Path = os.environ["FILE_UPLOAD_TEMP_DIR"]
    # SECTION - AWS settings
    AWS_ACCESS_KEY_ID: str = os.environ["AWS_ACCESS_KEY_ID"]
    AWS_SECRET_ACCESS_KEY: str = os.environ["AWS_SECRET_ACCESS_KEY"]
    AWS_S3_REGION_NAME: str = os.environ["AWS_S3_REGION_NAME"]
    AWS_STORAGE_BUCKET_NAME: str = os.environ["AWS_STORAGE_BUCKET_NAME"]
    AWS_DEFAULT_ACL: str = "private"
    AWS_S3_CUSTOM_DOMAIN: str = os.environ["AWS_S3_CUSTOM_DOMAIN"]
    AWS_S3_OBJECT_PARAMETERS: Dict[str, str] = {"CacheControl": "max-age=86400"}
    AWS_S3_SIGNATURE_VERSION: str = "s3v4"
    AWS_QUERYSTRING_EXPIRE: int = 3600
    AWS_S3_FILE_OVERWRITE: bool = True

    STATIC_LOCATION: str = "static/production/"
    STATIC_URL: str = f"{os.environ['AWS_S3_CUSTOM_DOMAIN']}/{STATIC_LOCATION}"
    STATIC_ROOT: str = STATIC_URL
    WHITENOISE_MANIFEST_STRICT: bool = False
    # SECTION -  S3 public media settings
    PUBLIC_MEDIA_LOCATION: str = "media/"
    MEDIA_URL: str = f"{os.environ['AWS_S3_CUSTOM_DOMAIN']}/{PUBLIC_MEDIA_LOCATION}"
    # !SECTION

    # SECTION - S3 private media settings
    PRIVATE_MEDIA_LOCATION: str = "restricted/"
    MEDIA_DIRECTORY: str = "/restricted/compliance/"
    PRIVATE_FILE_STORAGE: str = "core.backends.storage_backends.PrivateMediaStorage"
    PRIVATE_MEDIA_URL: str = f"{os.environ['AWS_S3_CUSTOM_DOMAIN']}/{PRIVATE_MEDIA_LOCATION}"

    # !SECTION
    # SECTION - File Management
    ALLOWED_UPLOAD_MIME_TYPES: List[str] = list(os.environ["ALLOWED_MIME_TYPES"].split(","))
    STORAGES: Dict[str, str] = {
        "default": {"BACKEND": "core.backends.storage_backends.PrivateMediaStorage"},
        "staticfiles": {
            "BACKEND": "core.backends.storage_backends.StaticStorage",
        },
    }
    # SECTION - Templates
    HTML_MINIFY: bool = True
    COMPRESS_CACHE_BACKEND: str = "compressed_static"
    TEMPLATE_DIR: List[Path] = [
        os.path.join(BASE_DIR, "templates"),
        os.path.join(BASE_DIR, "templates", "web"),
        os.path.join(BASE_DIR, "templates", "employee"),
        os.path.join(BASE_DIR, "templates", "account"),
        os.path.join(BASE_DIR, "templates", "portal"),
        os.path.join(BASE_DIR, "templates", "compliance"),
        os.path.join(BASE_DIR, "templates", "announcements"),
    ]
    TEMPLATES: List[Dict[str, Union[bool, str, dict]]] = [
        {
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "DIRS": TEMPLATE_DIR,
            "APP_DIRS": True,
            "OPTIONS": {
                "context_processors": [
                    "django.template.context_processors.debug",
                    "django.template.context_processors.request",
                    "django.contrib.auth.context_processors.auth",
                    "django.contrib.messages.context_processors.messages",
                    "nhhc.utils.context_processors.from_settings",
                ],
            },
        },
    ]
    # !SECTION
    # SECTION - Logging

    warnings.filterwarnings(
        action="ignore",
        message=r"w+",
    )
    warnings.showwarning = log_warning

    LOG_FORMAT: str = "<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <white>{message}</white>'"
    MASTER_LOG_FILE: Path = os.path.join(os.environ.get("LOG_FILE_DIRECTORY"), "MASTER.log")
    CRITICAL_LOG_FILE: Path = os.path.join(os.environ.get("LOG_FILE_DIRECTORY"), "FATAL.log")
    DEBUG_LOG_FILE: Path = os.path.join(os.environ.get("LOG_FILE_DIRECTORY"), "SERVICE.log")
    LOGTAIL_HANDLER: LogtailHandler = LogtailHandler(source_token=os.environ["LOGTAIL_API_KEY"])
    DEFAULT_HANDLER: TextIO = sys.stdout
    logger.add(sys.stderr, level="ERROR", format=LOG_FORMAT)
    logger.add(DEFAULT_HANDLER, colorize=True, format=LOG_FORMAT, diagnose=False, catch=False, backtrace=False, level="INFO")
    logger.add(MASTER_LOG_FILE, colorize=True, format=LOG_FORMAT, diagnose=False, catch=True, backtrace=False, level="INFO")
    REQUEST_TRAFFIC_MODULES: List[str] = [
        "request.traffic.UniqueVisitor",
        "request.traffic.UniqueVisit",
        "request.traffic.Hit",
        "request.traffic.Search",
        "request.traffic.User",
        "request.traffic.Error404",
        "request.traffic.Error",
    ]

    # SECTION - Performance Monitoring

    PROMETHEUS_LATENCY_BUCKETS: Set[float] = (
        0.1,
        0.2,
        0.5,
        0.6,
        0.8,
        1.0,
        2.0,
        3.0,
        4.0,
        5.0,
        6.0,
        7.5,
        9.0,
        12.0,
        15.0,
        20.0,
        30.0,
        float("inf"),
    )
    # !SECTION
    # SECTION  - REST API CONFIGURATIONS
    REST_FRAMEWORK: Dict[str, Any] = {
        "DEFAULT_AUTHENTICATION_CLASSES": [
            "rest_framework.authentication.BasicAuthentication",
            "rest_framework.authentication.SessionAuthentication",
            "rest_framework.authentication.TokenAuthentication",
        ]
    }
    # !SECTION
    # SECTION - ASYNC/BACKGROUND WORKERS
    CELERY_TIMEZONE: str = TIME_ZONE
    CELERY_TASK_TRACK_STARTED: bool = True
    CELERY_TASK_TIME_LIMIT: int = int(os.environ["CELERY_TASK_TIME_LIMIT"]) * 60
    CELERY_RESULT_BACKEND: str = "django-db"
    CELERY_CACHE_BACKEND: str = "celery"
    CELERY_ACCEPT_CONTENT: List[str] = ["application/json"]
    CELERY_TASK_SERIALIZER: str = "json"
    CELERY_RESULT_SERIALIZER: str = "json"
    CELERY_RESULT_EXTENDED: bool = True
    CELERY_WORKER_CANCEL_LONG_RUNNING_TASKS_ON_CONNECTION_LOSS: bool = True
    # Broker Settings
    CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP: bool = True
    CELERY_BROKER_CONNECTION_TIMEOUT: int = 30
    CELERY_BROKER_HEARTBEAT: int = 10
    CELERY_BROKER_POOL_LIMIT: int = 10
    CELERY_BROKER_TRANSPORT_OPTIONS: Dict[str, int] = {"visibility_timeout": 43200}  # 12 hours in seconds

    # Task Settings
    CELERY_TASK_ACKS_LATE: bool = True
    CELERY_TASK_REJECT_ON_WORKER_LOST: bool = True
    CELERY_WORKER_PREFETCH_MULTIPLIER: int = 1
    # !SECTION


# ----------------------------------------ENVIRONMENT SETTING BOUNDARY-------------------------------------------------------------------------------


class Production(Base):
    # SECTION - Production Protocols, General Security ACL COnfigs
    DEBUG: bool = False
    ALLOWED_HOSTS = list(os.environ["ALLOWED_HOSTS"])
    SECURE_SSL_REDIRECT: int = True
    SECURE_HSTS_SECONDS: int = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS: bool = True
    SECURE_REDIRECT_EXEMPT: List[Pattern] = [r"^/metrics", r"^/status/*"]
    SECURE_HSTS_PRELOAD: bool = True
    SECURE_BROWSER_XSS_FILTER: bool = True
    X_FRAME_OPTIONS: str = "DENY"
    SESSION_EXPIRE_AT_BROWSER_CLOSE: bool = True
    SESSION_COOKIE_AGE: int = 14400
    # !SECTION
    # SECTION - Basic Application Definition
    KOLO_DISABLE: bool = not DEBUG
    RECAPTCHA_PUBLIC_KEY: str = os.environ["RECAPTCHA_PUBLIC_KEY"]
    RECAPTCHA_PRIVATE_KEY: str = os.environ["RECAPTCHA_PRIVATE_KEY"]
    SITE_ID: int = int(os.environ["SITE_ID"])
    # SECTION - Email Communication
    EMAIL_SUBJECT_PREFIX: str = "NHHC Django Server -"
    INTERNAL_SUBMISSION_NOTIFICATION_EMAILS: List[str] = list(os.environ["INTERNAL_NOTIFICATION_EMAILS"])

    INSTALLED_APPS: List[str] = [
        "whitenoise.runserver_nostatic",
        "allauth",
        "allauth.account",
        "jazzmin",
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.sites",
        "django.contrib.humanize",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        "django.contrib.sitemaps",
        ## Installed 3rd Apps
        "compressor",
        "crispy_forms",
        "crispy_bootstrap5",
        "storages",
        "phonenumber_field",
        "widget_tweaks",
        "django_prometheus",
        "rest_framework",
        "rest_framework.authtoken",
        "request",
        "formset",
        "django_filters",
        "localflavor",
        "faker",
        "django_recaptcha",
        "django_celery_beat",
        "corsheaders",
        "tinymce",
        "health_check",
        "health_check.db",
        "health_check.cache",
        "health_check.contrib.redis",
        "health_check.contrib.psutil",
        "health_check.contrib.celery",
        "health_check.contrib.celery_ping",
        "sage_encrypt",
        "robots",
        "defender",
        "django_celery_results",
        "health_check.contrib.migrations",
        "guardian",
        ## Installed Internal Apps
        "applications.web",
        "applications.portal",
        "applications.employee",
        "applications.announcements",
        "core",
        "applications.authentication",
        "applications.compliance",
        "django_extensions",
    ]

    MIDDLEWARE: List[str] = [
        "django_prometheus.middleware.PrometheusBeforeMiddleware",  # 1
        "django.middleware.security.SecurityMiddleware",  # 2
        "whitenoise.middleware.WhiteNoiseMiddleware",  # 3
        "django.contrib.sessions.middleware.SessionMiddleware",  # 4
        "corsheaders.middleware.CorsMiddleware",  # 5
        "django.middleware.cache.UpdateCacheMiddleware",  # 6
        "htmlmin.middleware.HtmlMinifyMiddleware",
        "django.middleware.common.CommonMiddleware",  # 7
        "django.middleware.csrf.CsrfViewMiddleware",  # 8
        "django.contrib.auth.middleware.AuthenticationMiddleware",  # 9
        "allauth.account.middleware.AccountMiddleware",  # 9.1
        "defender.middleware.FailedLoginMiddleware",  # 10
        "django_require_login.middleware.LoginRequiredMiddleware",  # 11
        "django.contrib.messages.middleware.MessageMiddleware",  # 12
        "django.middleware.clickjacking.XFrameOptionsMiddleware",  # 13
        "request.middleware.RequestMiddleware",  # 15
        "django_prometheus.middleware.PrometheusAfterMiddleware",  # 16
        "django.middleware.cache.FetchFromCacheMiddleware",
        "htmlmin.middleware.MarkRequestMiddleware",
        # 17 (moved to the end)
        # "common.middleware.maintenance.MaintenanceModeMiddleware",   # Uncomment if needed
    ]
    # SECTION - Database and Caching

    DATABASES = {
        "default": dj_database_url.config(
            default=f'postgresql://{os.environ["POSTGRES_USER"]}:{os.environ["POSTGRES_PASSWORD"]}@{os.environ["POSTGRES_HOST"]}:25061?sslmode=require&sslrootcert={os.environ["DB_CERT_PATH"]}',
            conn_max_age=600,
            conn_health_checks=True,
        ),
    }
    DATABASES["default"]["NAME"] = os.environ["POSTGRES_DATABASE"]

    DATABASES["default"]["DISABLE_SERVER_SIDE_CURSORS"] = True
    REDIS_URL: str = os.environ["REDIS_CACHE_URI_TOKEN"]
    #  Cache configurations with separate Redis databases
    CACHES = {
        "default": {
            "BACKEND": os.environ["CACHE_ENGINE"],
            "LOCATION": os.environ["CACHE_DB_REDIS"],
            "OPTIONS": {
                **Base.REDIS_CONNECTION_OPTIONS,
                "KEY_PREFIX": "NHHC-NATIVE",
            },
        },
        "session": {
            "BACKEND": os.environ["CACHE_ENGINE"],
            "LOCATION": os.environ["SESSION_CACHE"],
            "OPTIONS": {
                **Base.REDIS_CONNECTION_OPTIONS,
                "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
                "KEY_PREFIX": "SESSION-NHHC",
            },
        },
        "celery": {
            "BACKEND": os.environ["CACHE_ENGINE"],
            "LOCATION": os.environ["CELERY_BROKER_URL"],
            "OPTIONS": {
                **Base.REDIS_CONNECTION_OPTIONS,
                "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
                "KEY_PREFIX": "BG-WORKER",
            },
        },
        "compressed_static": {
            "BACKEND": os.environ["CACHE_ENGINE"],
            "LOCATION": os.environ["COMPRESSOR_CACHE"],
            "OPTIONS": {
                **Base.REDIS_CONNECTION_OPTIONS,
                "KEY_PREFIX": "COMPRESSOR",
            },
        },
    }
    REDIS_HOST: str = os.environ["REDIS_HOST"]
    # SECTION - Password validation

    ACCOUNT_EMAIL_SUBJECT_PREFIX: str = "CareNett - Nett Hands Home Care - Caregiver Portal - "

    STATIC_HOST: str = Base.STATIC_URL
    logger.add(Base.MASTER_LOG_FILE, colorize=True, format=Base.LOG_FORMAT, diagnose=False, catch=True, backtrace=False, level="INFO")
    logger.add(Base.LOGTAIL_HANDLER, colorize=True, format=Base.LOG_FORMAT, diagnose=False, catch=True, backtrace=True, level="INFO")
    REQUEST_LOG_USER: bool = True

    # !SECTION
    PROMETHEUS_METRIC_NAMESPACE: str = "care_nett"
    # SECTION - ADMIN Backend
    JAZZMIN_SETTINGS: Dict[str, Any] = {
        "site_title": "CareNett Control Center",
        "site_header": "Control Center",
        "site_brand": "Control Center",
        "site_logo": "img/logo-light.png",
        "login_logo": "img/logo-dark.png",
        "login_logo_dark": None,
        "site_logo_classes": "img-circle",
        "site_icon": "img/favicon.png",
        "welcome_sign": "Welcome to the CareNett Control Center",
        "copyright": "Blackberry Py, LLC",
        "search_model": ["employee.Employee", "auth.Group", "web.interested"],
        "user_avatar": None,
        ############
        # Top Menu #
        ############
        "topmenu_links": [
            {"name": "Home", "url": "admin:index", "permissions": ["auth.view_user"]},
            {"model": "employee.Employee"},
        ],
        #############
        # User Menu #
        #############
        "usermenu_links": [
            {
                "name": "Support",
                "url": "https://github.com/NettHandsHomeCare-Portal/NettHands/issues",
                "new_window": True,
            },
            {"model": "employee.Employee"},
        ],
        #############
        # Side Menu #
        #############
        "show_sidebar": True,
        "navigation_expanded": True,
        "hide_apps": ["sites", "robots"],
        "hide_models": [],
        "order_with_respect_to": [""],
        "icons": {
            "auth": "fa-solid fa-users-gear",
            "employee.Employee": "fas fa-user",
            "auth.Group": "fa-solid fa-users-gear",
            "compliance.Contract": "fa-solid fa-file-contract",
            "rest_framework.authtoken.Token": "fa-solid fa-certificate",
            "authentication.UserProfile": "fa-solid fa-id-badge",
            "compliance.Compliance": "fa-solid fa-scale-balanced",
            "web.EmploymentApplicationModel": "fa-solid fa-file-circle-plus",
            "web.ClientInterestSubmission": "fa-solid fa-person-circle-plus",
            "portal.PayrollException": "fa-solid fa-money-bill",
        },
        # Icons that are used when one is not manually specified
        "default_icon_parents": "fa-solid fa-gear",
        "default_icon_children": "fa-solid fa-sliders",
        #################
        # Related Modal #
        #################
        "related_modal_active": True,
        "use_google_fonts_cdn": True,
        "show_ui_builder": False,
        "changeform_format": "horizontal_tabs",
        "changeform_format_overrides": {
            "auth.user": "collapsible",
            "auth.group": "vertical_tabs",
        },
        "language_chooser": False,
    }
    CELERY_BROKER_URL: str = os.environ["ASYNC_QUEUE_BROKER_URI"]


# ----------------------------------------ENVIRONMENT SETTING BOUNDARY-------------------------------------------------------------------------------


class Development(Base):
    # SECTION - Development Protocols, General Security ACL COnfigs
    DEBUG: True = True
    ALLOWED_HOSTS: List[str] = (["*"],)
    SECURE_SSL_REDIRECT: bool = False
    # !SECTION
    # SECTION - Basic Application Definition
    KOLO_DISABLE: bool = not DEBUG
    RECAPTCHA_PUBLIC_KEY: str = os.environ["RECAPTCHA_PUBLIC_KEY"]
    RECAPTCHA_PRIVATE_KEY: str = os.environ["RECAPTCHA_PRIVATE_KEY"]
    SITE_ID: int = (1,)
    # SECTION - Email Communication
    EMAIL_SUBJECT_PREFIX: str = "NHHC Django Development Server -"
    INTERNAL_SUBMISSION_NOTIFICATION_EMAILS: List[str] = ["test@netthandshome.care", "terry@brooksjr.com"]
    INSTALLED_APPS: List[str] = [
        "whitenoise.runserver_nostatic",
        "allauth",
        "allauth.account",
        "jazzmin",
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.sites",
        "django.contrib.humanize",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        "django.contrib.sitemaps",
        ## Installed 3rd Apps
        "compressor",
        "debug_toolbar",
        "mail_panel",
        "crispy_forms",
        "crispy_bootstrap5",
        "storages",
        "phonenumber_field",
        "widget_tweaks",
        "django_prometheus",
        "rest_framework",
        "rest_framework.authtoken",
        "request",
        "formset",
        "django_filters",
        "localflavor",
        "faker",
        "django_recaptcha",
        "django_celery_beat",
        "corsheaders",
        "tinymce",
        "health_check",
        "health_check.db",
        "health_check.cache",
        "health_check.contrib.redis",
        "health_check.contrib.psutil",
        "health_check.contrib.celery",
        "health_check.contrib.celery_ping",
        "sage_encrypt",
        "robots",
        "defender",
        "django_celery_results",
        "health_check.contrib.migrations",
        "guardian",
        ## Installed Internal Apps
        "web",
        "portal",
        "employee",
        "announcements",
        "nhhc",
        "authentication",
        "compliance",
        "django_extensions",
    ]

    MIDDLEWARE: List[str] = [
        "django_prometheus.middleware.PrometheusBeforeMiddleware",  # 1
        "django.middleware.security.SecurityMiddleware",  # 2
        "whitenoise.middleware.WhiteNoiseMiddleware",  # 3
        "django.contrib.sessions.middleware.SessionMiddleware",  # 4
        "corsheaders.middleware.CorsMiddleware",  # 5
        "debug_toolbar.middleware.DebugToolbarMiddleware",
        "django.middleware.cache.UpdateCacheMiddleware",  # 6
        "htmlmin.middleware.HtmlMinifyMiddleware",
        "django.middleware.common.CommonMiddleware",  # 7
        "django.middleware.csrf.CsrfViewMiddleware",  # 8
        "django.contrib.auth.middleware.AuthenticationMiddleware",  # 9
        "allauth.account.middleware.AccountMiddleware",  # 9.1
        "defender.middleware.FailedLoginMiddleware",  # 10
        "django_require_login.middleware.LoginRequiredMiddleware",  # 11
        "django.contrib.messages.middleware.MessageMiddleware",  # 12
        "django.middleware.clickjacking.XFrameOptionsMiddleware",  # 13
        "request.middleware.RequestMiddleware",  # 15
        "django_prometheus.middleware.PrometheusAfterMiddleware",  # 16
        "django.middleware.cache.FetchFromCacheMiddleware",
        "htmlmin.middleware.MarkRequestMiddleware",
        # 17 (moved to the end)
        # "nhhc.middleware.maintenance.MaintenanceModeMiddleware",   # Uncomment if needed
    ]

    # SECTION - Database and Caching

    DATABASES = {
        "default": {
            "ENGINE": "django_prometheus.db.backends.postgresql",
            "NAME": "development_carenett",
            "USER": "dev_user",
            "PASSWORD": "dev_password",
            "HOST": "localhost",
            "PORT": 6543,
        }
    }
    REDIS_URL: str = "redis://default@localhost:6379"
    CACHES = {
        "default": {
            "BACKEND": os.environ["CACHE_ENGINE"],
            "LOCATION": f"{REDIS_URL}/1",
            "OPTIONS": {
                **Base.REDIS_CONNECTION_OPTIONS,
                "KEY_PREFIX": "NHHC-NATIVE",
            },
        },
        "session": {
            "BACKEND": os.environ["CACHE_ENGINE"],
            "LOCATION": f"{REDIS_URL}/2",
            "OPTIONS": {
                **Base.REDIS_CONNECTION_OPTIONS,
                "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
                "KEY_PREFIX": "SESSION-NHHC",
            },
        },
        "celery": {
            "BACKEND": os.environ["CACHE_ENGINE"],
            "LOCATION": f"{REDIS_URL}/3",
            "OPTIONS": {
                **Base.REDIS_CONNECTION_OPTIONS,
                "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
                "KEY_PREFIX": "BG-WORKER",
            },
        },
        "compressed_static": {
            "BACKEND": os.environ["CACHE_ENGINE"],
            "LOCATION": f"{REDIS_URL}/5",
            "OPTIONS": {
                **Base.REDIS_CONNECTION_OPTIONS,
                "KEY_PREFIX": "COMPRESSOR",
            },
        },
    }
    REDIS_HOST: str = "localhost"
    # SECTION - Password validation
    ACCOUNT_EMAIL_SUBJECT_PREFIX: str = "[DEVELOPMENT] CareNett - Nett Hands Home Care - Caregiver Portal - "
    STATIC_HOST: str = ""
    logger.add("spam.log", level="DEBUG", format=Base.LOG_FORMAT)
    REQUEST_LOG_USER: bool = False
    PROMETHEUS_METRIC_NAMESPACE: str = "development_care_nett"
    DEBUG_TOOLBAR_PANELS: List[str] = [
        "debug_toolbar.panels.history.HistoryPanel",
        "debug_toolbar.panels.versions.VersionsPanel",
        "debug_toolbar.panels.timer.TimerPanel",
        "debug_toolbar.panels.settings.SettingsPanel",
        "debug_toolbar.panels.headers.HeadersPanel",
        "debug_toolbar.panels.request.RequestPanel",
        "debug_toolbar.panels.sql.SQLPanel",
        "debug_toolbar.panels.staticfiles.StaticFilesPanel",
        "debug_toolbar.panels.templates.TemplatesPanel",
        "debug_toolbar.panels.cache.CachePanel",
        "debug_toolbar.panels.signals.SignalsPanel",
        "debug_toolbar.panels.logging.LoggingPanel",
        "debug_toolbar.panels.redirects.RedirectsPanel",
        "debug_toolbar.panels.profiling.ProfilingPanel",
        "mail_panel.panels.MailToolbarPanel",
    ]
    # SECTION - ADMIN Backend
    JAZZMIN_SETTINGS = {
        "site_title": "Development Env - CareNett Control Center",
        "site_header": "Development Env - Control Center",
        "site_brand": "Development Env - Control Center",
        "site_logo": "img/logo-light.png",
        "login_logo": "img/logo-dark.png",
        "login_logo_dark": None,
        "site_logo_classes": "img-circle",
        "site_icon": "img/favicon.png",
        "welcome_sign": "Welcome to the Development Env of CareNett Control Center",
        "copyright": "Blackberry Py, LLC",
        "search_model": ["employee.Employee", "auth.Group", "web.interested"],
        "user_avatar": None,
        ############
        # Top Menu #
        ############
        "topmenu_links": [
            {"name": "Home", "url": "admin:index", "permissions": ["auth.view_user"]},
            {"model": "employee.Employee"},
        ],
        #############
        # User Menu #
        #############
        "usermenu_links": [
            {
                "name": "Support",
                "url": "https://github.com/NettHandsHomeCare-Portal/NettHands/issues",
                "new_window": True,
            },
            {"model": "employee.Employee"},
        ],
        #############
        # Side Menu #
        #############
        "show_sidebar": True,
        "navigation_expanded": True,
        "hide_apps": ["sites", "robots"],
        "hide_models": [],
        "order_with_respect_to": [""],
        "icons": {
            "auth": "fa-solid fa-users-gear",
            "employee.Employee": "fas fa-user",
            "auth.Group": "fa-solid fa-users-gear",
            "compliance.Contract": "fa-solid fa-file-contract",
            "rest_framework.authtoken.Token": "fa-solid fa-certificate",
            "authentication.UserProfile": "fa-solid fa-id-badge",
            "compliance.Compliance": "fa-solid fa-scale-balanced",
            "web.EmploymentApplicationModel": "fa-solid fa-file-circle-plus",
            "web.ClientInterestSubmission": "fa-solid fa-person-circle-plus",
            "portal.PayrollException": "fa-solid fa-money-bill",
        },
        "default_icon_parents": "fas fa-chevron-circle-right",
        "default_icon_children": "fas fa-circle",
        #################
        # Related Modal #
        #################
        "related_modal_active": True,
        #############
        # UI Tweaks #
        #############
        "use_google_fonts_cdn": True,
        "show_ui_builder": False,
        "changeform_format": "horizontal_tabs",
        "changeform_format_overrides": {
            "auth.user": "collapsible",
            "auth.group": "vertical_tabs",
        },
        "language_chooser": False,
    }
    CELERY_BROKER_URL: str = f"{REDIS_URL}/3"


# ----------------------------------------ENVIRONMENT SETTING BOUNDARY-------------------------------------------------------------------------------


class Testing(Base):
    # SECTION - Testing Protocols, General Security ACL COnfigs
    DEBUG: bool = False
    ALLOWED_HOSTS: List[str] = ["*"]
    SECURE_SSL_REDIRECT: bool = False
    # !SECTION
    # SECTION - Basic Application Definition
    KOLO_DISABLE: bool = not DEBUG
    RECAPTCHA_PUBLIC_KEY: str = "6LeIxAcTAMARAJcZVRqyHh71UMIEGNQ_MXjiZKhI"
    RECAPTCHA_PRIVATE_KEY: str = "6LeIxAcTAAAAAGG-vFI1TnRWxMZNFuojJ4WifJWe"
    # SECTION - Email Communication
    INSTALLED_APPS: List[str] = [
        "whitenoise.runserver_nostatic",
        "allauth",
        "allauth.account",
        "jazzmin",
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.sites",
        "django.contrib.humanize",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        "django.contrib.sitemaps",
        ## Installed 3rd Apps
        "compressor",
        "crispy_forms",
        "crispy_bootstrap5",
        "storages",
        "phonenumber_field",
        "widget_tweaks",
        "django_prometheus",
        "rest_framework",
        "rest_framework.authtoken",
        "request",
        "formset",
        "django_filters",
        "localflavor",
        "faker",
        "django_recaptcha",
        "django_celery_beat",
        "corsheaders",
        "tinymce",
        "health_check",
        "health_check.db",
        "health_check.cache",
        "health_check.contrib.redis",
        "health_check.contrib.psutil",
        "health_check.contrib.celery",
        "health_check.contrib.celery_ping",
        "sage_encrypt",
        "robots",
        "defender",
        "django_celery_results",
        "health_check.contrib.migrations",
        "guardian",
        ## Installed Internal Apps
        "web",
        "portal",
        "employee",
        "announcements",
        "nhhc",
        "authentication",
        "compliance",
        "django_extensions",
    ]

    MIDDLEWARE: str = [
        "django_prometheus.middleware.PrometheusBeforeMiddleware",  # 1
        "django.middleware.security.SecurityMiddleware",  # 2
        "whitenoise.middleware.WhiteNoiseMiddleware",  # 3
        "django.contrib.sessions.middleware.SessionMiddleware",  # 4
        "corsheaders.middleware.CorsMiddleware",  # 5
        "django.middleware.cache.UpdateCacheMiddleware",  # 6
        "htmlmin.middleware.HtmlMinifyMiddleware",
        "django.middleware.common.CommonMiddleware",  # 7
        "django.middleware.csrf.CsrfViewMiddleware",  # 8
        "django.contrib.auth.middleware.AuthenticationMiddleware",  # 9
        "allauth.account.middleware.AccountMiddleware",  # 9.1
        "defender.middleware.FailedLoginMiddleware",  # 10
        "django_require_login.middleware.LoginRequiredMiddleware",  # 11
        "django.contrib.messages.middleware.MessageMiddleware",  # 12
        "django.middleware.clickjacking.XFrameOptionsMiddleware",  # 13
        "request.middleware.RequestMiddleware",  # 15
        "django_prometheus.middleware.PrometheusAfterMiddleware",  # 16
        "django.middleware.cache.FetchFromCacheMiddleware",
        "htmlmin.middleware.MarkRequestMiddleware",
    ]
    # SECTION - Database and Caching
    DATABASES = {
        "default": {
            "ENGINE": "django_prometheus.db.backends.postgresql",
            "NAME": "test_testing_carenett_prod",
            "USER": os.getenv("POSTGRES_USER"),
            "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
            "HOST": "blackberry-py-multi-tenet-prod-do-user-16979650-0.k.db.ondigitalocean.com",
            "PORT": 25060,
            "OPTIONS": {
                "sslmode": "require",
                "sslrootcert": os.environ["DB_CERT_PATH"],
            },
        }
    }

    REDIS_URL: str = ("redis://default@localhost:6379",)
    CACHES = {
        "default": {
            "BACKEND": os.environ["CACHE_ENGINE"],
            "LOCATION": f"{REDIS_URL}/1",
            "OPTIONS": {
                **Base.REDIS_CONNECTION_OPTIONS,
                "KEY_PREFIX": "NHHC-NATIVE",
            },
        },
        "session": {
            "BACKEND": os.environ["CACHE_ENGINE"],
            "LOCATION": f"{REDIS_URL}/2",
            "OPTIONS": {
                **Base.REDIS_CONNECTION_OPTIONS,
                "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
                "KEY_PREFIX": "SESSION-NHHC",
            },
        },
        "celery": {
            "BACKEND": os.environ["CACHE_ENGINE"],
            "LOCATION": f"{REDIS_URL}/3",
            "OPTIONS": {
                **Base.REDIS_CONNECTION_OPTIONS,
                "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
                "KEY_PREFIX": "BG-WORKER",
            },
        },
        "compressed_static": {
            "BACKEND": os.environ["CACHE_ENGINE"],
            "LOCATION": f"{REDIS_URL}/5",
            "OPTIONS": {
                **Base.REDIS_CONNECTION_OPTIONS,
                "KEY_PREFIX": "COMPRESSOR",
            },
        },
    }
    ACCOUNT_EMAIL_SUBJECT_PREFIX: str = "[TESTING] CareNett - Nett Hands Home Care - Caregiver Portal - "
    REQUEST_LOG_USER: bool = False
