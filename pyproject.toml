[project]
name = "carenett"
version = "1.0.0"
description = "The NHHC Workplace Management System is a comprehensive tool designed to streamline workplace operations by managing resources, employees, and daily tasks in a centralized system. Built with Python, Django, and PostgreSQL, it facilitates efficient operations, performance tracking, and resource allocation."
authors = [
    {name = "Terry Arthur Brooks, Jr.",email = "Terry.Arthur@BrooksJr.com"}
]
license = {text = "GNU General Public License"}
readme = "README.md"
requires-python = ">=3.11,<4"
package-mode = false


[tool.poetry.dependencies]
python = ">3.11,<4"
django = "^5.1.4"
psycopg2-binary = "^2.9.10"
django-crispy-forms = "^2.3"
django-localflavor = "^4.0"
whitenoise = "^6.8.2"
gunicorn = "^23.0.0"
boto3 = "^1.35.97"
django-recaptcha = "^4.0.0"
django-cors-headers = "^4.6.0"
loguru = "^0.7.3"
arrow = "^1.3.0"
logtail-python = "^0.3.2"
highlight-io = "^0.9.0"
django-health-check = "^3.18.3"
django-redis = "^5.4.0"
django-loguru = "^1.0.3"
django-request = "^1.6.3"
django-prometheus = "^2.3.1"
hiredis = "^3.1.0"
django-storages = "^1.14.4"
django-allauth = "^65.3.1"
crispy-bootstrap5 = "^2024.10"
django-widget-tweaks = "^1.5.0"
djangorestframework = "^3.15.2"
markdown = "^3.7"
django-filter = "^24.3"
python-magic = "^0.4.27"
django-formset = "^1.5.5"
django-robots = "^6.1"
django-jazzmin = "^3.0.1"
doppler-env = "^0.3.1"
django-pgcrypto = "^3.0.2"
django-appconf = "^1.0.6"
django-bunny = "^1.1.6"
django-pgcrypto-fields = "^2.6.0"
django-sage-encrypt = "^0.4.4"
django-extensions = "^3.2.3"
django-weasyprint = "^2.3.1"
reportlab = "^4.2.5"
python-gnupg = "^0.5.4"
django-tinymce = "^4.1.0"
pyenchant = "^3.2.2"
django-referrer-policy = "^1.0"
celery = "^5.4.0"
django-celery-results = "^2.5.1"
flower = "^2.0.1"
pymupdf = "^1.25.1"
django-celery-beat = "^2.7.0"
django-smtp-ssl = "^1.0"
django-defender = "^0.9.8"
python-dotenv = "^1.0.1"
pillow = "^11.1.0"
mypy = "^1.14.1"
mypy-extensions = "^1.0.0"
msgpack = "^1.1.0"
humanize = "^4.11.0"
django-require-login = "^1.1.4"
dj-database-url = "^2.3.0"
django-configurations = "^2.5.1"
logfire = "^3.1.0"
redis = "^5.2.1"
filetype = "^1.2.0"
tenacity = "^9.0.0"
random-password-generator = "^2.2.0"
faker-file = "^0.17.14"
django-compressor = "^4.5.1"
beautifulsoup4 = "^4.12.3"
html5lib = "^1.1"
csscompressor = "^0.9.5"
brotli = "^1.1.0"
django-guardian = "^2.4.0"
django-phonenumber-field = {extras = ["phonenumbers"], version = "^8.0.0"}
psutil = "^6.1.1"
argon2-cffi = "^23.1.0"
django-minify-html = "^1.11.0"


[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.1"
black = "^24.10.0"
djhtml = "^3.0.7"
isort = "^5.13.2"
djlint = "^1.36.4"
django-debug-toolbar = "^4.4.6"
poetry-plugin-export = "^1.8.0"
bandit = "^1.8.0"
prospector = {extras = ["with-everything"], version = "^1.13.3"}
autoflake = "^2.3.1"
pylint-celery = "^0.3"
sourcery = "^1.29.0"
django-mail-panel = "^4.0.4"

[tool.poetry.group.test.dependencies]
selenium = "^4.27.1"
pytest-django = "^4.9.0"
coverage = "^7.6.10"
django-webtest = "^1.9.12"
model-bakery = "^1.20.1"
mock = "^5.1.0"
factory-boy = "^3.3.1"
tblib = "^3.0.0"


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"

[tool.black]
line-length = 200
target-version = ['py312']
extend-exclude = "CareNett/compliance/views.py"

[tool.ruff]
line-length = 120
target-version = "py312"

[tool.mypy]
ignore_missing_imports = true
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true


[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    ]
omit = [
    "*/migrations/*",
    ]
ignore_errors = true
skip_empty = true

[tool.djlint]
ignore="H021 H006"

[tool.pylint.messages_control]
max-line-length = 300

disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-few-public-methods",
    "line-too-long",
    "trailing-whitespace",
]

[tool.pytest.ini_options]
# -- recommended but optional:
python_files = ["test_*.py", "*_test.py", "testing/python/*.py"]

[tool.kolo]
use_rust = true

[tool.ruff.lint]
fixable = ["ALL"]
extend-select = [
  "UP", # pyupgrade
  "F", # Pyflakes
  "E", "W", # Pycodestyle
  "I", # isort
  "S", # flake8-bandit
  "SIM", # flake8-simplify
  "B", # flake8-bugbear
  # pydocstyle
  "D213", "D214", "D215", "D405", "D406", "D407", "D408", "D409", "D410", "D411", "D413", "D416", "D417",
]
ignore= [
  "S101", # Use of assert detected
  "SIM105", # suppressible-exception (slow code)
]

[tool.sourcery]
