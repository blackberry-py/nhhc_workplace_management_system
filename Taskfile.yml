---
version: "3"
silent: true
vars:
  TOKEN: $DOPPLER_TOKEN
tasks:
  create_log_files:
    dir: /var/log
    desc: Creates the log files with proper permissions for the application
    cmds:
      # - direnv allow /Users/terry-brooks./Github/nhhc_workplace_management_system/.envrc
      - sudo touch /var/log/MASTER.log
      - sudo touch /var/log/FATAL.log
      - sudo touch /var/log/SERVICE.log
      - sudo touch /var/log/QUERY.log
      - sudo chmod 777 /var/log/QUERY.log
      - sudo chmod 777 /var/log/MASTER.log
      - sudo chmod 777 /var/log/FATAL.log
      - sudo chmod 777 /var/log/SERVICE.log
    generates:
      - /var/log/MASTER.log
      - /var/log/FATAL.log
      - /var/log/SERVICE.log
    sources:
      - /var/log/MASTER.log
      - /var/log/FATAL.log
      - /var/log/SERVICE.log
    internal: false
    preconditions:
      - sh: test -e /var/log/MASTER.log
        msg: MASTER.log file missing
      - sh: test -e /var/log/FATAL.log
        msg: FATAL.log file missing
      - sh: test -e /var/log/SERVICE.log
        msg: SERVICE.log file missing
  collect:
    dir: .
    desc: Collects the static files to one directory for production static serving
    cmds:
      - doppler run -- .venv/bin/python  run/manage.py collectstatic --no-input
    generates:
      - ./staticfiles
    sources:
      - ./staticfiles
    silent: false
    interactive: false
  deps_check:
    dir: .
    desc: Uses poetry to check the venv dependencies, sync them, update the requirements dir files.
    cmds:
      - doppler run -t {{.TOKEN}} -- poetry sync
      - doppler run -t {{.TOKEN}} -- poetry export --without dev,test --without-hashes -without-urls > ./requirements/base.txt
      - doppler run -t {{.TOKEN}} -- poetry export --only dev,test --without-hashes -without-urls > ./requirements/dev.txt
    generates:
      - ./requirements/dev.txt
      - ./requirements/base.txt
      - ./poetry.lock
    sources:
      - ./poetry.lock
    silent: false
    interactive: false
  start_test_worker:
    desc: Starts celery background workers
    dir: .
    cmds:
      - echo "Initializing Background Workers..."
      - doppler run -c prod -- python3 -m celery -A common.celery:app worker -D --loglevel debug -n %%d
    interactive: false
    silent: true
  monitor_test_workers:
    desc: Starts flower the celery background workers
    dir: .
    cmds:
      - nohup doppler run -c prod -- python3 -m celery -A common flower  --port=5555 &
    interactive: false
    silent: true
    internal: false
  start_worker:
    desc: Starts celery background workers
    dir: .
    cmds:
      - sudo systemctl start celery.service
    interactive: false
    silent: true
    internal: true
  monitor_workers:
    desc: Starts flower the celery background workers
    dir: .
    cmds:
      - sudo systemctl start flower.service
    interactive: false
    silent: true
  develop:
    desc: Starts the Django Application, and background workers in a debug state
    dir: .
    env:
      DJANGO_CONFIGURATION: Development
    cmds:
      - echo "Completing Pre-Start Environment Check For Development..."
      - task: create_log_files
      - echo 'Starting Celery'.......
      - task: start_test_worker
      - echo 'Starting Flower'
      - task: monitor_test_workers
      - NEW_RELIC_CONFIG_FILE=.configs/newrelic.ini newrelic-admin run-program doppler run -c prod -- python run/manage.py runserver_plus --key-file selftest-key --cert-file selftest-cert localhost:8000
      - defer: echo "Stopping Instance and Dependencies...Killing Background Workers.." && pkill -9 -f 'celery worker' && echo 'Stopping Flower' && pkill -9 -f 'celery flower' & rm nohup.out
    interactive: false
    silent: false

  start:
    desc: Starts the Django Application, and background workers in a production state
    dir: core
    cmds:
      - echo "Completing Pre-Start Environment Check For Production..."
      - task: create_log_files
      - echo 'Starting Celery'
      - task: start_worker
      - echo 'Starting Flower'
      - task: monitor_workers
      - doppler run -t {{.TOKEN}} -- sudo systemctl start carenett.service
    interactive: false
    silent: false
    requires:
      vars:
        - DOPPLER_TOKEN
        - DB_CERT_PATH
  make_admin:
    desc: Creates a new Superuser
    dir: .
    cmds:
      - echo 'Creating Superuser'
      - doppler run  -c prod -- .venv/bin/python run/manage.py createsuperuser --no-input
      - echo 'User Created'
    interactive: false
    silent: false
  test:
    desc: Runs Django Tests
    dir: .
    cmds:
      - echo 'Starting test - Setting Configuration Env To Testing'
      - export DJANGO_CONFIGURATION=Testing
      - doppler run -- python run/manage.py test {{.CLI_ARGS}} --verbosity=2 --keepdb   --failfast  --force-color
      - defer: echo '{{if .EXIT_CODE}}Testing Failed with {{.EXIT_CODE}}!{{else}}Successfully Ran Test Suite!{{end}}'
    interactive: false
    silent: false
  shell:
    desc: Open a shell in the app container
    cmds:

    
      - doppler run -- docker-compose exec app /bin/bash
    interactive: true
    silent: false
  venv:
    desc: Make a new virtual environment
    dir: .
    cmds:
      - python3 -m venv .venv --prompt="ACTIVE_VENV_CARENETT"
      - cmd: source .venv/bin/activate
        ignore_error: true
  install:
    desc: Make venv and install requirements
    dir: .
    deps:
      - venv
    cmds:
      - pip install poetry
      - poetry lock -n
      - poetry install --no-root
